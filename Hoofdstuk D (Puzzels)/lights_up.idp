/*
 * lights_up.idp
 * Cedric Lefevre
 * Romeo Permentier
 * 19/05/2021
 */

vocabulary Voc {
    /* ----- TYPE ----- */
 	type R isa nat //RIJ
    type K isa nat //KOLOM
    type Getal isa int
    type l isa int
    
    /* ----- CONSTANTE ----- */ 
    lampen: l

    /* ----- RELATIE ----- */
    Buren(R,R,K,K)
    Verlicht(R,K)
    Obstakel(R, K)
    Fout(R,K)
  
    Lamp(R,K)
    
    
    /* ----- FUNCTIE ----- */
    
    LampBuren(R,K):Getal
    partial ObstakelWaarde(R, K):Getal

    
}

structure Struct_7x7_normal : Voc {
    R = {1..7}
    K = {1..7}
    Getal = {0..4}
    l ={0..100000}
    
    Obstakel = {
        1,2; 1,3; 1,4;
        2,7;
        3,7;
        4,1; 4,4; 4,7;
        5,1;
        6,1;
        7,4; 7,5; 7,6;
        
    }
    ObstakelWaarde={
        1,4,2;
    	4,1,2; 4,4,1;
    	6,1,1;
    	7,6,1;
    	
        
    }
    

}
structure Struct_14x14_hard : Voc {
    R = {1..14}
    K = {1..14}
    Getal = {0..4}
    l ={0..100000}
    

    Obstakel = {
        1,2;	1,3;	1,7;	1,11;
        2,2;	2,13;	2,14;
        3,4;	3,14;
        4,1;	4,4;	4,8;	4,9;	4,10;	4,11;	4,12;
        5,4;
        6,4;	6,7;	6,8;
        7,4;	7,6;	7,9;	7,14;
        8,1;	8,6;	8,9;	8,11;
        9,7;	9,8;	9,11;
        10,11;
        11,3;	11,4;	11,5;	11,6;	11,7;	11,11;	11,14;
        12,1;	12,11;
        13,1;	13,2;	13,13;
        14,4;	14,8;	14,12;	14,13;
    }
    ObstakelWaarde={
        1,2,1;	1,7,1;	1,11,0;
        2,2,1;	2,14,1;

        4,8,0;	4,9,1;	4,10,1;

        6,4,1;
        7,6,1;	7,9,1;	7,14,0;
        8,1,1;	8,11,0;
        9,7,2;	9,11,0;

        11,5,1;	11,6,1;	11,7,1;	11,11,1;	11,14,0;

        13,1,1;	13,13,2;
        14,8,2;
    }
    
    
    
    
  
}

theory Theo : Voc {
    
    
    Buren(x1, x2, y1, y2) <=> (abs(x1-x2)=1 & y1=y2)| (abs(y1-y2)=1 & x1=x2).
    
    
    
    {
        LampBuren(x, y) = #{x1, y1 : Lamp(x1,y1) & Buren(x, x1, y, y1)}.
     }
    
    {
        // FOUT indien obstakel niet genoeg buren heeft
        ! x,y : Fout(x,y) <- LampBuren(x,y) ~= ObstakelWaarde(x,y) & ?c : c=ObstakelWaarde(x, y).
        
        // FOUT indien geen obstakel tussen 2 lampen
        // 1 .................. 2 --> FOUT
    	// 1 ........3......... 2 --> GEEN FOUT
        
        
        ! x,y : Fout(x, y) <- Lamp(x,y) & ?y1 : y~=y1 & Lamp(x,y1)
        			& ~(?z : (y<z<y1 | y1<z<y) &  Obstakel(x,z)).
        
        ! x,y :Fout(x, y) <-Lamp(x,y) & ?x1 : x~=x1 & Lamp(x1,y)
        			& ~(?z : (x<z<x1 | x1<z<x) & Obstakel(z,y)).
        
        
        //FOUT indien het geen obstakel is en niet verlicht is
        
        ! x,y :Fout(x, y) <- ~Obstakel(x,y) & ~Verlicht(x,y).
        
    }
    
    //! x y : ~Obstakel(x,y)=>Verlicht(x,y).
   
    
    {
       ! x,y : Verlicht(x,y) <- ?y1 : Lamp(x,y1) 
        			& ~(?z : (y<z<y1 | y1<z<y) & Obstakel(x,z)).
        
      ! x,y: Verlicht(x,y) <- ?x1 : Lamp(x1,y) 
        			& ~(?z : (x<z<x1 | x1<z<x) & Obstakel(z,y)).
      
  	}

    
    
    
    //op obstakel kan geen lamp staan
     !r1[R],r2[R], k1[K], k2[K]:

    	Lamp(r1,k1) & Lamp(r2,k2) => ~(
    		Obstakel(r1,k1)|Obstakel(r2,k2)).
    
    
	lampen = #{r k: Lamp(r,k)}.
    
    // GEEN FOUTEN MAKEN
    #{r k: Fout(r,k)}=0.

    
}

term termlampen: Voc{
    lampen
}

procedure main() {
    stdoptions.nbmodels = 100
    printmodels(modelexpand(Theo,Struct_14x14_hard))
    //printmodels(minimize(Theo, Struct,termlampen))
    //printmodels(maximize(Theo, Struct,termlampen))
}