/*
 * lights_up.idp
 * Cedric Lefevre
 * Romeo Permentier
 * 17/05/2021
 */
vocabulary Voc {
    /* ----- TYPE ----- */
 	type R isa nat //RIJ
    type K isa nat //KOLOM
    type Getal isa int
    
    /* ----- CONSTANTE ----- */  
    
    /* ----- RELATIE ----- */
    Lamp(R,K)
    //Verlicht(R,K,R,K)
    Obstakel(R, K,Getal)
    
    Slaan(R, K, R, K)


    
    /* ----- FUNCTIE ----- */

    
}

structure Struct : Voc {
    R = {1..7}
    K = {1..7}
    Getal = {-1..4}
    
    Obstakel = {
        1,2,0; 1,3,0;
        2,7,1;
        3,7,0;
        
        5,1,1;
        6,1,-1;
        7,5,2; 7,6,-1;
        
    }
    
    
  
}

theory Theo : Voc {
    /* --------------------- LAMPEN MOGEN ELKAAR NIET VERLICHTEN --------------------- */
    // ZOEK LAMPEN DIE ELKAAR NIET VERLICHTEN
    !r1[R] r2[R] k1[K] k2[K]:  Lamp(r1,k1) & Lamp(r2,k2) => ~Slaan(r1, k1, r2, k2).
    // DEFINIEER WANNEER LAMPEN ELKAAR VERLICHTEN
    {
        // HORIZONTAAL SLAAN
        !r1[R] r2[R] k1[K] k2[K]: Slaan(r1, k1, r2, k2) <- 
        
        	r1 = r2 & k1 ~= k2 
        	& 
        	Lamp(r1,k1) & Lamp(r2,k2).
        
        //VERTICAAL SLAAN        
        !r1[R] r2[R] k1[K] k2[K]: Slaan(r1, k1, r2, k2)<- 
        	
        	r1 ~= r2 & k1 = k2 
        	& 
			Lamp(r1,k1) & Lamp(r2,k2).
     }
   	/* --------------------- LAMPEN MOGEN NIET OP OBSTAKELS STAAN --------------------- */
    !r[R] k[K] g[Getal]: Obstakel(r,k,g) => ~Lamp(r,k).

    
    
}

procedure main() {
    stdoptions.nbmodels = 100
    printmodels(modelexpand(Theo,Struct))
}