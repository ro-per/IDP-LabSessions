/*
 * lights_up.idp
 * Cedric Lefevre
 * Romeo Permentier
 * 19/05/2021
 */

vocabulary Voc {
    /* ----- TYPE ----- */
 	type R isa nat //RIJ
    type K isa nat //KOLOM
    type Getal isa int
    type I isa nat
    type l isa int
    
    /* ----- CONSTANTE ----- */ 
    lampen: l
    fouten: l

    /* ----- RELATIE ----- */
    Buren(R,R,K,K)
    Verlicht(R,K)
    Obstakel(R, K)
    Fout(R,K)
    //ObstakelWaarde(R, K,Getal)

  
    Lamp(R,K)
    
    
    /* ----- FUNCTIE ----- */
    
    VerlichteBuren(R,K):Getal

    
}

structure Struct : Voc {
    R = {1..7}
    K = {1..7}
    Getal = {0..4}
    I = {1..7}
    l ={1..100000}
    
    
    Obstakel = {
        1,2; 1,3; 1,4;
        2,7;
        3,7;
        4,1; 4,4; 4,7;
        5,1;
        6,1;
        7,4; 7,5; 7,6;
        
    }
    /*ObstakelWaarde={
        1,4,2;
    	4,1,2; 4,4,1;
    	6,1,1;
    	7,6,1;
    	
        
    }*/
    
    
  
}

theory Theo : Voc {
    
    
    Buren(x1, x2, y1, y2) <=> (abs(x1-x2)=<1 & y1=y2)| (abs(y1-y2)=<1 & x1=x2).
    
    
    
    {
        VerlichteBuren(x, y) = #{x1, y1 : Verlicht(x1,y1) & Buren(x, x1, y, y1)}.
     }
    
    
    /*
    {
        Verlicht(x,y) <- ?y1 : 
        	Verlicht(x,y1) & ~(?z : (y<z<y1 | y1<z<y) & Obstakel(x,z)).
        
        Verlicht(x,y) <- ?x1 : 
        	Verlicht(x1,y) & ~(?z : (x<z<x1 | x1<z<x) & Obstakel(z,y)).
        
        
        
        
        
        //error(x, y) <- counted(x, y) ~= count(x, y) & ?c : c=count(x, y).
  
    
  }
    
    {
        Fout(x, y) <- Verlicht(x,y) & ?y1 : y~=y1 & Verlicht(x,y1)
        			& ~(?z : (y<z<y1 | y1<z<y) &  Obstakel(x,z)).
        
        Fout(x, y) <-Verlicht(x,y) & ?x1 : x~=x1 & Verlicht(x1,y)
        			& ~(?z : (x<z<x1 | x1<z<x) & Obstakel(z,y)).
    }
    
    */
	lampen = #{r k: Lamp(r,k)}.
    fouten = #{r k: Fout(r,k)}.
    
    
}

term termlampen: Voc{
    lampen
}
term termfouten: Voc{
    fouten
}

procedure main() {
    //stdoptions.nbmodels = 100
    //printmodels(modelexpand(Theo,Struct))
    printmodels(minimize(Theo, Struct,termfouten))
    //printmodels(maximize(Theo, Struct,termfouten))
}